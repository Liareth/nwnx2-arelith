[JVM]
# Specify your classpath here.
# You will at least need the org.nwnx bundle jar and all the
# custom classes you intend to load. If you're using some fancy
# framework, you can load org.nwnx.nwnx2.java in setup() too.
classpath="/path/to/org.nwnx.nwnx2.java.jar"

# You can specify additional options to your VM here.
# The defaults are probably only useful for developers and
# will spam your server console.
vmOptions="-verbose:jni -Xcheck:jni"

# To attach a remote debugger:
# With Eclipse, just load your project code, and add a new remote debug session
# to the given host and port. Set a breakpoint, and watch it stop there. :)
# vmOptions="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000"

# Print each event and token to the console as it occurs.
# Useful to see what is going on, but makes the server console
# otherwise unusable on any busy server.
printEvents=1

# Prints each NWScript call to stdout as it occurs.
# For really bad cases of WTF-is-going-on (Thouch attaching a debugger
# to the JVM will be of more help).
debugNWScriptCalls=0

# This is a class that has the following methods:
#   static void setup() // Called immediately after JVM initialisation.
#   static void init() // Called AFTER resolving all classes and methods.
#   static void shutdown() // Called immediately before exit, after module unload (NO NWN context).
# Visibility of methods does not matter, nwnx_jvm finds them anyways.
# The provided jar contains a TestRunner which does various sanity tests.
# It is suggested to run it at least once with that.
initListener=org/nwnx/nwnx2/jvm/TestRunner

# This is a class that has the following methods:
#   static void event(NWObject objSelf, String event)
# Visibility of methods does not matter, nwnx_jvm finds them anyways.
# The provided jar contains a event listener. You can listen for events
# by calling Scheduler.addSchedulerListener and implementing the interface.
eventListener=org/nwnx/nwnx2/jvm/Scheduler

# This is a class that has the following methods:
#   static void token(NWObject objSelf, String token)
# Visibility of methods does not matter, nwnx_jvm finds them anyways.
# The provided jar file implements a token listener. See the README for details
# as to what this actually is for.
tokenListener=org/nwnx/nwnx2/jvm/Scheduler

# This is a class that has the following methods:
#   static void sco(String key, byte[] gffData)
#   static byte[] rco(String key)
# Visibility of methods does not matter, nwnx_jvm finds them anyways.
# The provided jar implements a Observer pattern. Register with
# SCORCO.addSCORCOListener(...) to handle SCO/RCO-events.
# The provided TestRunner tests SCO/RCO *IF* your module publishes
# a event named "creature_hb". (Don't test on creature spawn, infinite loop).
scorcoListener=org/nwnx/nwnx2/jvm/SCORCO

# This is a class that has the following methods:
#   static byte[] demandRes(String resRef)
# Visibility of methods does not matter, nwnx_jvm finds them anyways.
# The provided jar implements a Observer pattern. Register with
# ResMan.addResManListener(...) to handle ResMan-events.
# The provided TestRunner tests ResMan.
resmanListener=org/nwnx/nwnx2/jvm/ResMan

# The String conversation class. You can set
# your used charset at runtime there or write your own. It's usually
# safe to just keep it as-is if you're in ISO-8859-1.
convClass=org/nwnx/nwnx2/jvm/Conv
