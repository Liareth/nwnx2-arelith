; All fields are neccessary.
[REDIS]
; 0: only errors
; 1: requests
; 2: requests and response data (may explode log!)
; Setting debuglevel > 0 incurs a significant performance hit (about 10ms per 1000 requests)
; If you want to debug redis calls, it's probably better to use "redis-cli monitor".
debuglevel=0

; Socket to redis. Provide this OR server.
; Sockets are slightly faster than a TCP connection for nwserver usecases.
;socket=./redis.sock

server=localhost
port=6379

; leave empty if no password needed.
password=letmein
; The database index to use for regular queries.
db=0

; This is the script being called for new events.
pubsubscript=redis

; The channels to subscribe to at start (and reconnect).
; All subscriptions are made with PSUBSCRIBE in order to support
; wildcards.
subscribe=channel1,channel2

; Set this to 1 to enable resman integration. Please note that enabling
; resman will incur two redis queries for each resource requested; while usually
; not a problem, this will incur lag if your redis server is not local.
resman=1

; When using Resman to load resources, this will be prefixed
; to the filename being requested.
; For example: GET nwnx:resman:tent.uti
resmanPrefix=nwnx:resman:

; This is the query executed that gets the last-modified timestamp of
; a resource. This needs to be a normal unix timestamp.
resmanQueryTimestamp="GET nwnx:resman:%s:.ts"
; This is the query executed to check if a resource exists. Needs to be 1 or "1" for it to be
; valid.
resmanQueryExists="EXISTS nwnx:resman:%s"
; Get the raw gff data.
resmanQueryGet="GET nwnx:resman:%s"

; How long requests are cached in seconds (returning old data) before
; hitting redis again. This is a micro-optimisation for often-running scripts.
; 1 is a pretty good value.
resmanCacheTime=1

; NOT SUPPORTED YET - will use database configured in db= for now.
; The database index to use for resman queries.
; resmanDb=0
