#ifndef _CNWSCREATURESTATS_H_
#define _CNWSCREATURESTATS_H_
#include "nwndef.h"
#include "CExoArrayList.h"
#include "CExoString.h"
#include "CExoLocString.h"
#include "CResRef.h"
#include "CNWSCreatureStats_ClassInfo.h"

class CNWSCreatureStats
{
public:
    void AddExperience(unsigned long);
    void AddFeat(unsigned short);
    void AddKnownSpell(unsigned char, unsigned long);
    int AddSpellLikeAbilityToList(unsigned long, int, unsigned char);
    void AdjustAlignment(unsigned char, short, unsigned long);
    void AdjustSpellUsesPerDay();
    int AutoMemorizeSpells(int);
    int CalcLevelUpNumberFeats(unsigned char, unsigned char, unsigned char &, unsigned char &);
    char CalcStatModifier(unsigned char);
    int CanChooseFeat(unsigned short, unsigned char, unsigned char, CExoArrayList<unsigned short> *);
    int CanLevelUp();
    int CheckSpellSuitability(int, CNWSpell *, int, int, int, int, int, int, unsigned char &, int);
    int ClearFeats();
    void ClearMemorizedSpellSlot(unsigned char, unsigned char, unsigned char);
    void ComputeFeatBonuses(CExoArrayList<unsigned short> *, int, int);
    unsigned char ComputeNumberKnownSpellsLeft(unsigned char, unsigned char);
    int ConfirmDomainSpell(unsigned char, unsigned char, unsigned long);
    void DecrementFeatRemainingUses(unsigned short);
    void DecrementSpellsPerDayLeft(unsigned char, unsigned char);
    int FeatAcquired(unsigned short, CExoArrayList<unsigned short> *, int);
    int FeatRequirementsMetAfterLevelUp(unsigned short, CNWLevelStats *, unsigned char);
    int FeatRequirementsMet(unsigned short, CExoArrayList<unsigned short> *);
    char GetACNaturalBase(int);
    int GetAlignmentString();
    short GetArmorClassVersus(CNWSCreature *, int);
    int GetAttackModifierVersus(CNWSCreature *);
    unsigned char GetAttacksPerRound();
    int GetBaseAttackBonus(int);
    char GetBaseFortSavingThrow();
    char GetBaseReflexSavingThrow();
    char GetBaseWillSavingThrow();
    unsigned short GetBonusFeat(unsigned short);
    unsigned char GetCHAStat();
    unsigned char GetCONStat();
    int GetCanUseRelatedCategory(int, int);
    int GetCanUseSkillAfterLevelUp(unsigned short, CNWLevelStats *);
    int GetCanUseSkill(unsigned char);
    int GetCasterLevel(unsigned char);
    CNWSCreatureStats_ClassInfo * GetClassInfo(unsigned char);
    unsigned char GetClassLevel(unsigned char, int);
    unsigned char GetClassNegativeLevels(unsigned char);
    int GetClassString(unsigned char);
    unsigned char GetClass(unsigned char);
    unsigned char GetCreatureDamageDice(unsigned char);
    unsigned char GetCreatureDamageDie(unsigned char);
    int GetCreatureHasTalent(int, int, unsigned char);
    int GetCreatureTalentRandomFeat(int, int, int &, int &, unsigned char &);
    int GetCreatureTalentRandomKnownSpell(int, int, int &, int &, unsigned char &, int);
    int GetCreatureTalentRandomMemorisedSpell(int, int, int &, int &, unsigned char &, int, unsigned char &);
    int GetCreatureTalentRandomSkill(int, int, int &, int &, unsigned char &);
    int GetCreatureTalentRandomSpellFromItem(int, int, int &, int &, unsigned char &, unsigned long &, int &);
    int GetCreatureTalentRandomSpellLikeAbility(int, int, int &, int &, unsigned char &, unsigned char &);
    int GetCreatureTalentRandomSpell(int, int, int &, int &, unsigned char &, unsigned char &);
    int GetCreatureTalentRandom(int, int, int &, int &, unsigned char &, unsigned long &, int &, unsigned char &, unsigned char &);
    int GetCriticalHitMultiplier(int);
    int GetCriticalHitRoll(int);
    char GetDEXMod(int);
    unsigned char GetDEXStat();
    int GetDamageBonus(CNWSCreature *, int);
    int GetDamageRoll(CNWSObject *, int, int, int, int, int);
    unsigned char GetDomain1(unsigned char);
    unsigned char GetDomain2(unsigned char);
    int GetEffectImmunity(unsigned char, CNWSCreature *);
    unsigned char GetEffectiveCRForPotentialLevel();
    int GetEpicWeaponDevastatingCritical(CNWSItem *);
    int GetEpicWeaponFocus(CNWSItem *);
    int GetEpicWeaponOverwhelmingCritical(CNWSItem *);
    int GetEpicWeaponSpecialization(CNWSItem *);
    unsigned long GetExpNeededForLevelUp();
    int GetFavoredEnemyBonus(CNWSCreature *);
    unsigned char GetFeatRemainingUses(unsigned short);
    unsigned char GetFeatSourceClass(unsigned short);
    unsigned char GetFeatTotalUses(unsigned short);
    unsigned short GetFeat(unsigned short);
    char GetFortSavingThrow(int);
    CExoString GetFullName();
    int GetHasLostClassAbilities(unsigned char);
    int GetHasSilencedSpell(unsigned long);
    int GetHasStilledSpell(unsigned long);
    unsigned long GetHighestLevelKnown();
    unsigned short GetHighestLevelOfFeat(unsigned short);
    unsigned char GetHitDie(unsigned char, unsigned char);
    unsigned char GetINTStat();
    int GetIsClassAvailable(unsigned char);
    unsigned char GetIsClass(unsigned char);
    int GetIsDomainSpell(unsigned char, unsigned char, unsigned char);
    int GetIsEpitomeOfAlignment();
    int GetIsInKnownSpellList(unsigned char, unsigned long);
    int GetIsInSpellLikeAbilityList(unsigned long);
    int GetIsWeaponOfChoice(unsigned long);
    unsigned long GetKnownSpell(unsigned char, unsigned char, unsigned char);
    int GetLargePortrait();
    CNWLevelStats * GetLevelStats(unsigned char);
    unsigned char GetLevel(int);
    int GetMeetsPrestigeClassRequirements(CNWClass *);
    int GetMeleeAttackBonus(int, int, int);
    int GetMeleeDamageBonus(int, unsigned char);
    unsigned char GetMemorizedSpellInSlotMetaType(unsigned char, unsigned char, unsigned char);
    unsigned char GetMemorizedSpellInSlotReady(unsigned char, unsigned char, unsigned char);
    unsigned long GetMemorizedSpellInSlot(unsigned char, unsigned char, unsigned char);
    unsigned char GetMemorizedSpellReadyCount(unsigned char, unsigned long, unsigned char *, unsigned char *);
    unsigned char GetMemorizedSpellReadyCount(unsigned char, unsigned long, unsigned char);
    int GetMemorizedSpellReadyCount(unsigned long);
    int GetNumLevelsOfClass(unsigned char);
    int GetNumLevelsOfClass(unsigned char, int);
    unsigned short GetNumberKnownSpells(unsigned char, unsigned char);
    unsigned char GetNumberMemorizedSpellSlots(unsigned char, unsigned char);
    unsigned char GetPotentialLevel();
    unsigned char GetPrimaryMod(unsigned char);
    int GetRaceString();
    int GetRangedAttackBonus(int, int);
    int GetRangedDamageBonus();
    char GetReflexSavingThrow(int);
    unsigned char GetSTRStat();
    unsigned char GetSchool(unsigned char);
    unsigned char GetSimpleAlignmentGoodEvil();
    unsigned char GetSimpleAlignmentLawChaos();
    char GetSkillRank(unsigned char, CNWSObject *, int);
    int GetSmallPortrait();
    unsigned char GetSpellFailure(unsigned char);
    unsigned char GetSpellGainWithBonusAfterLevelUp(unsigned char, unsigned char, CNWLevelStats *, unsigned char, int);
    unsigned char GetSpellGainWithBonus(unsigned char, unsigned char);
    unsigned char GetSpellLikeAbilityCasterLevel(unsigned long);
    int GetSpellMinAbilityMet(unsigned char, unsigned char);
    char GetSpellResistance();
    unsigned char GetSpellUsesLeft(unsigned long, unsigned char, unsigned char, unsigned char);
    unsigned char GetSpellsOfLevelReady(unsigned char, unsigned char);
    unsigned char GetSpellsPerDayLeft(unsigned char, unsigned char);
    void GetStatBonusesFromFeats(CExoArrayList<unsigned short> *, int *, unsigned char);
    float GetStatById(int);
    int GetTag();
    char GetTotalACSkillMod();
    char GetTotalCHABonus();
    char GetTotalCONBonus();
    char GetTotalDEXBonus();
    char GetTotalINTBonus();
    int GetTotalNegativeLevels();
    char GetTotalSTRBonus();
    char GetTotalWISBonus();
    unsigned char GetUnarmedDamageDice();
    unsigned char GetUnarmedDamageDie();
    int GetUnarmedDamageRoll(CNWSObject *);
    int GetUseMonkAttackTables(int);
    unsigned char GetWISStat();
    int GetWeaponFinesse(CNWSItem *);
    int GetWeaponFocus(CNWSItem *);
    int GetWeaponImprovedCritical(CNWSItem *);
    int GetWeaponSpecialization(CNWSItem *);
    char GetWillSavingThrow(int);
    int HasFeat(unsigned short);
    void IncrementFeatRemainingUses(unsigned short);
    int IncrementSpellsPerDayLeft(unsigned char, unsigned char);
    void LevelDown(CNWLevelStats *);
    int LevelUpAutomatic(unsigned char, int, unsigned char);
    void LevelUp(CNWLevelStats *, unsigned char, unsigned char, unsigned char, int);
    int ModifyAlignment(short, short);
    void ReadSpellsFromGff(CResGFF *, CResStruct *, int);
    unsigned long ReadStatsFromGff(CResGFF *, CResStruct *, CNWSCreatureAppearanceInfo *, int, int, int);
    void ReadySpellLevel(unsigned char);
    void RemoveFeat(unsigned short);
    int RemoveKnownSpell(unsigned char, unsigned long);
    void ResetFeatRemainingUses();
    void ResetSpellLikeAbilities();
    int ResetSpellsPerDayLeft(unsigned char, unsigned char);
    int ResolveSpecialAttackAttackBonus(CNWSCreature *);
    int ResolveSpecialAttackDamageBonus(CNWSCreature *);
    void SaveClassInfo(CResGFF *, CResStruct *);
    void SaveStats(CResGFF *, CResStruct *);
    void SetArcaneSpellFailure(char);
    void SetCHABase(unsigned char);
    void SetCONBase(unsigned char, int);
    int SetClassLevel(unsigned char, unsigned char);
    void SetClassNegativeLevels(unsigned char, unsigned char);
    int SetClass(unsigned char, unsigned char);
    void SetDEXBase(unsigned char);
    int SetDomain1(unsigned char, unsigned char);
    int SetDomain2(unsigned char, unsigned char);
    void SetExperience(unsigned long, int);
    void SetFeatRemainingUses(unsigned short, unsigned char);
    int SetHasLostClassAbilities(unsigned char, int);
    void SetINTBase(unsigned char);
    int SetMemorizedSpellInSlotReady(unsigned char, unsigned char, unsigned char, int);
    int SetMemorizedSpellSlot(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char, int);
    void SetMovementRate(int);
    int SetNormalBonusFlags(unsigned short, int &, int &);
    void SetNumberBonusSpells(unsigned char, unsigned char, unsigned char);
    int SetNumberMemorizedSpellSlots(unsigned char, unsigned char, unsigned char);
    void SetSTRBase(unsigned char);
    int SetSchool(unsigned char, unsigned char);
    int SetSkillRank(unsigned char, char);
    void SetSpellFailure(unsigned char, unsigned char);
    int SetSpellLikeAbilityReady(unsigned long, int, unsigned char);
    void SetSpellResistancePenalty(char);
    void SetSpellResistance(char);
    void SetStatById(int, float);
    int SetTag(CExoString const &);
    void SetWISBase(unsigned char);
    int UnReadySpell(unsigned long, unsigned char, unsigned char, unsigned char);
    void UpdateCombatInformation();
    int UpdateLastStatsObject(unsigned long long, CNWCreatureStatsUpdate *);
    void UpdateNumberMemorizedSpellSlots();
    unsigned long ValidateLevelUp(CNWLevelStats *, unsigned char, unsigned char, unsigned char);
    ~CNWSCreatureStats();
    CNWSCreatureStats(CNWSCreature *);

    /* 0x0/0 */ unsigned long field_0;
    /* 0x4/4 */ unsigned long field_4;
    /* 0x8/8 */ unsigned short field_8;
    /* 0xA/10 */ unsigned short field_A;
    /* 0x10/16 */ char rsvd1[4];
    /* 0x10/16 */ unsigned long field_10;
    /* 0x24/36 */ char rsvd2[16];
    /* 0x24/36 */ CNWSCreature *OriginalObject;
    /* 0x34/52 */ char rsvd3[12];
    /* 0x34/52 */ CExoLocString FirstName;
    /* 0x3C/60 */ CExoLocString LastName;
    /* 0x44/68 */ CResRef Conversation;
    /* 0x54/84 */ unsigned long ConvInterruptable;
    /* 0x58/88 */ unsigned long field_58;
    /* 0x60/96 */ char rsvd4[4];
    /* 0x60/96 */ unsigned long field_60;
    /* 0x64/100 */ unsigned long field_64;
    /* 0x68/104 */ unsigned long Age;
    /* 0x6C/108 */ unsigned long Gender;
    /* 0x70/112 */ unsigned long XP;
    /* 0x74/116 */ unsigned long IsPC;
    /* 0x78/120 */ unsigned long IsDM;
    /* 0x7C/124 */ unsigned long field_7C;
    /* 0x80/128 */ unsigned long field_80;
    /* 0x84/132 */ unsigned long AIDisabled;
    /* 0x88/136 */ unsigned long field_88;
    /* 0x8C/140 */ unsigned long field_8C;
    /* 0x90/144 */ unsigned long FactionID;
    /* 0x94/148 */ unsigned long field_94;
    /* 0x98/152 */ unsigned long field_98;
    /* 0x9C/156 */ unsigned long field_9C;
    /* 0xA0/160 */ char StartingPackage;
    /* 0xA1/161 */ char ClassesCount;
    /* 0xA2/162 */ char field_A2;
    /* 0xA3/163 */ char field_A3;
    /* 0xA4/164 */ CNWSCreatureStats_ClassInfo ClassInfo[3];
    /* 0x3EC */      unsigned short RacialType;
    /* 0x3EE */      unsigned short field_3ee;
    /* 0x3F0/1008 */ CExoString Subrace;
    /* 0x3F8 */      unsigned char Str;
    /* 0x3F9 */      char StrMod;
    /* 0x3FA */      unsigned char Dex;
    /* 0x3FB */      char DexMod;
    /* 0x3FC */      unsigned char Con;
    /* 0x3FD */      char ConMod;
    /* 0x3FE */      unsigned char Int;
    /* 0x3FF */      char IntMod;
    /* 0x400 */      unsigned char Wis;
    /* 0x401 */      char WisMod;
    /* 0x402 */      unsigned char Cha;
    /* 0x403 */      char ChaMod;
    /* 0x404 */      unsigned char ArmorNaturalBase;
    /* 0x405 */      unsigned char ArmorArmourBase;
    /* 0x406 */      unsigned char ArmorShieldBase;
    /* 0x407 */      unsigned char ArmorArmourBonus;
    /* 0x408 */      unsigned char ArmorArmourPenalty;
    /* 0x409 */      unsigned char ArmorDeflectionBonus;
    /* 0x40a */      unsigned char ArmorDeflectionPenalty;
    /* 0x40b */      unsigned char ArmorShieldBonus;
    /* 0x40c */      unsigned char ArmorShieldPenalty;
    /* 0x40d */      unsigned char ArmorNaturalBonus;
    /* 0x40e */      unsigned char ArmorNaturalPenalty;
    /* 0x40f */      unsigned char ArmorDodgeBonus;
    /* 0x410 */      unsigned char ArmorDodgePenalty;
    /* 0x411 */      unsigned char OverrideBAB;
    /* 0x412 */      char OverrideAttacks;
    /* 0x413 */      char field_413;
    /* 0x414 */      unsigned long field_414;
    /* 0x418 */      unsigned long field_418;
    /* 0x41c */      unsigned long field_41c;
    /* 0x420 */      unsigned long field_420;
    /* 0x424 */      unsigned long field_424;
    /* 0x428 */      CCombatInformation* CombatInfo;
    /* 0x42c */      char ArcaneSpellFailureArmor;
    /* 0x42d */      char ArcaneSpellFailureMainhand;
    /* 0x42e */      char ArcaneSpellFailureOffhand;
    /* 0x42f */      char ArcaneSpellFailure;
    /* 0x430 */      unsigned long field_430;
    /* 0x434 */      unsigned long field_434;
    /* 0x438 */      char SpellResistance;
    /* 0x439 */      char SpellResistancePenalty;
    /* 0x43a */      char gap_43a_to_43f[6];
    /* 0x440 */      unsigned short field_440;
    /* 0x442 */      unsigned short FirstArmorClassEffect;
    /* 0x444 */      unsigned short FirstAttackBonusEffect;
    /* 0x446 */      unsigned short FirstDamageReductionEffect;
    /* 0x448 */      unsigned short FirstDamageResistanceEffect;
    /* 0x44a */      unsigned short FirstDamageEffect;
    /* 0x44c */      unsigned short FirstAIStateEffect;
    /* 0x44e */      unsigned short FirstIconEffect;
    /* 0x450 */      unsigned short field_450;
    /* 0x452 */      unsigned short FirstConcealEffect;
    /* 0x454 */      unsigned short field_454;
    /* 0x456 */      unsigned short FirstAbilityEffect;
    /* 0x458 */      unsigned short field_458;
    /* 0x45a */      unsigned short field_45a;
    /* 0x45c */      unsigned short FirstMissChanceEffect;
    /* 0x45e */      unsigned short field_45e;
    /* 0x460 */      unsigned short field_460;
    /* 0x462 */      unsigned short field_462;
    /* 0x464 */      unsigned short field_464;
    /* 0x466 */      unsigned short field_466; // 2 bytes offset off here
    /* 0x468 */      unsigned short field_468;
    /* 0x46a */      unsigned short FirstSkillEffect;
    /* 0x46c */      unsigned short FirstSavingThrowEffect;
    /* 0x46e */      unsigned short field_46e;
    /* 0x470 */      unsigned short FirstImmunityEffect;
    /* 0x472 */      unsigned short field_472;
    /* 0x474 */      unsigned short field_474;
    /* 0x476 */      unsigned short SkillPoints;
    /* 0x478 */      unsigned long Skills;
    /* 0x47c */      char ArmorCheckPenaltyArmor;
    /* 0x47d */      char ArmorCheckPenaltyShield;
    /* 0x47e */      CResRef Portrait;
    /* 0x48e */      char SimpleAlignmentGoodEvil;
    /* 0x48f */      char field_48f;
    /* 0x490 */      char SimpleAlignmentLawChaos;
    /* 0x491 */      char field_491;
    /* 0x492 */      unsigned char ColorSkin;
    /* 0x493 */      unsigned char ColorHair;
    /* 0x494 */      unsigned char ColorTattoo1;
    /* 0x495 */      unsigned char ColorTattoo2;
    /* 0x496 */      unsigned short Appearance;
    /* 0x498 */      char Phenotype;
    /* 0x49A/1178 */ unsigned char BodyPart_RFoot;
    /* 0x49B/1179 */ unsigned char BodyPart_LFoot;
    /* 0x49C/1180 */ unsigned char BodyPart_RShin;
    /* 0x49D/1181 */ unsigned char BodyPart_LShin;
    /* 0x49E/1182 */ unsigned char BodyPart_LThigh;
    /* 0x49F/1183 */ unsigned char BodyPart_RThigh;
    /* 0x4A0/1184 */ unsigned char BodyPart_Pelvis;
    /* 0x4A1/1185 */ unsigned char BodyPart_Torso;
    /* 0x4A2/1186 */ unsigned char BodyPart_Belt;
    /* 0x4A3/1187 */ unsigned char BodyPart_Neck;
    /* 0x4A4/1188 */ unsigned char BodyPart_RFArm;
    /* 0x4A5/1189 */ unsigned char BodyPart_LFArm;
    /* 0x4A6/1190 */ unsigned char BodyPart_RBicep;
    /* 0x4A7/1191 */ unsigned char BodyPart_LBicep;
    /* 0x4A8/1192 */ unsigned char BodyPart_RShoul;
    /* 0x4A9/1193 */ unsigned char BodyPart_LShoul;
    /* 0x4AA/1194 */ unsigned char BodyPart_RHand;
    /* 0x4AB/1195 */ unsigned char BodyPart_LHand;
    /* 0x4AC */      char field_4AC;
    /* 0x4AD */      char cs_tail_old;
    /* 0x4AE */      char cs_wings_old;
    /* 0x4AF */      char field_4AF;
    /* 0x4B0 */      unsigned int TailModel;
    /* 0x4B4 */      unsigned int WingModel;
    /* 0x4B8 */      float MovementRate;
    /* 0x4BC */      float RunRate;
    /* 0x4C0 */      float WalkRate;
    /* 0x4C4 */      char FortitudeSave;
    /* 0x4C5 */      char WillSave;
    /* 0x4C6 */      char ReflexSave;
    /* 0x4C7 */      unsigned char field_4C7;
    /* 0x4C8 */      unsigned int AnimalCompanionType;
    /* 0x4CC */      unsigned int FamiliarType;
    /* 0x4D0 */      CExoString AnimalCompanionName;
    /* 0x4D8 */      CExoString FamiliarName;
    /* 0x4E4 */      char *Deity;
};
#endif
